//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace 项目_网络音乐播放器.MusicService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="song_view", Namespace="http://schemas.datacontract.org/2004/07/server")]
    [System.SerializableAttribute()]
    public partial class song_view : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] album_imageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string album_nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string artist_nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long file_lengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int song_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string song_nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] album_image {
            get {
                return this.album_imageField;
            }
            set {
                if ((object.ReferenceEquals(this.album_imageField, value) != true)) {
                    this.album_imageField = value;
                    this.RaisePropertyChanged("album_image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string album_name {
            get {
                return this.album_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.album_nameField, value) != true)) {
                    this.album_nameField = value;
                    this.RaisePropertyChanged("album_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string artist_name {
            get {
                return this.artist_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.artist_nameField, value) != true)) {
                    this.artist_nameField = value;
                    this.RaisePropertyChanged("artist_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long file_length {
            get {
                return this.file_lengthField;
            }
            set {
                if ((this.file_lengthField.Equals(value) != true)) {
                    this.file_lengthField = value;
                    this.RaisePropertyChanged("file_length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int song_id {
            get {
                return this.song_idField;
            }
            set {
                if ((this.song_idField.Equals(value) != true)) {
                    this.song_idField = value;
                    this.RaisePropertyChanged("song_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string song_name {
            get {
                return this.song_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.song_nameField, value) != true)) {
                    this.song_nameField = value;
                    this.RaisePropertyChanged("song_name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MusicService.IMusicService")]
    public interface IMusicService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/GetSongViews", ReplyAction="http://tempuri.org/IMusicService/GetSongViewsResponse")]
        项目_网络音乐播放器.MusicService.song_view[] GetSongViews();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/GetSongViews", ReplyAction="http://tempuri.org/IMusicService/GetSongViewsResponse")]
        System.Threading.Tasks.Task<项目_网络音乐播放器.MusicService.song_view[]> GetSongViewsAsync();
        
        // CODEGEN: 消息 DownFile 的包装名称(DownFile)以后生成的消息协定与默认值(DownLoadFile)不匹配
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/DownLoadFile", ReplyAction="http://tempuri.org/IMusicService/DownLoadFileResponse")]
        项目_网络音乐播放器.MusicService.DownFileResult DownLoadFile(项目_网络音乐播放器.MusicService.DownFile request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/DownLoadFile", ReplyAction="http://tempuri.org/IMusicService/DownLoadFileResponse")]
        System.Threading.Tasks.Task<项目_网络音乐播放器.MusicService.DownFileResult> DownLoadFileAsync(项目_网络音乐播放器.MusicService.DownFile request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownFile {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int Id;
        
        public DownFile() {
        }
        
        public DownFile(int Id) {
            this.Id = Id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownFileResult", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownFileResult {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long FileSize;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public bool IsSuccess;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public byte[] FileBytes;
        
        public DownFileResult() {
        }
        
        public DownFileResult(long FileSize, bool IsSuccess, byte[] FileBytes) {
            this.FileSize = FileSize;
            this.IsSuccess = IsSuccess;
            this.FileBytes = FileBytes;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMusicServiceChannel : 项目_网络音乐播放器.MusicService.IMusicService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MusicServiceClient : System.ServiceModel.ClientBase<项目_网络音乐播放器.MusicService.IMusicService>, 项目_网络音乐播放器.MusicService.IMusicService {
        
        public MusicServiceClient() {
        }
        
        public MusicServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MusicServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MusicServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MusicServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public 项目_网络音乐播放器.MusicService.song_view[] GetSongViews() {
            return base.Channel.GetSongViews();
        }
        
        public System.Threading.Tasks.Task<项目_网络音乐播放器.MusicService.song_view[]> GetSongViewsAsync() {
            return base.Channel.GetSongViewsAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        项目_网络音乐播放器.MusicService.DownFileResult 项目_网络音乐播放器.MusicService.IMusicService.DownLoadFile(项目_网络音乐播放器.MusicService.DownFile request) {
            return base.Channel.DownLoadFile(request);
        }
        
        public long DownLoadFile(int Id, out bool IsSuccess, out byte[] FileBytes) {
            项目_网络音乐播放器.MusicService.DownFile inValue = new 项目_网络音乐播放器.MusicService.DownFile();
            inValue.Id = Id;
            项目_网络音乐播放器.MusicService.DownFileResult retVal = ((项目_网络音乐播放器.MusicService.IMusicService)(this)).DownLoadFile(inValue);
            IsSuccess = retVal.IsSuccess;
            FileBytes = retVal.FileBytes;
            return retVal.FileSize;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<项目_网络音乐播放器.MusicService.DownFileResult> 项目_网络音乐播放器.MusicService.IMusicService.DownLoadFileAsync(项目_网络音乐播放器.MusicService.DownFile request) {
            return base.Channel.DownLoadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<项目_网络音乐播放器.MusicService.DownFileResult> DownLoadFileAsync(int Id) {
            项目_网络音乐播放器.MusicService.DownFile inValue = new 项目_网络音乐播放器.MusicService.DownFile();
            inValue.Id = Id;
            return ((项目_网络音乐播放器.MusicService.IMusicService)(this)).DownLoadFileAsync(inValue);
        }
    }
}
